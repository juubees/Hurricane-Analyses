# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M',
          '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M',
          '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded',
          '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B',
          '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B',
          '91.6B', '25.1B']

# 1
# Update Recorded Damages
def update_damages(damages):
    conversion = {"M": 1000000, "B": 1000000000}
    updated_damages = list()
    for damage in damages:
        if damage == 'Damages not recorded':
          updated_damages.append(damage)
        if damage.find("B") != -1:
          updated_damages.append(float(damage.strip('B'))*conversion["B"])
        if damage.find("M") != -1:
          updated_damages.append(float(damage.strip('M'))*conversion["M"])
    return updated_damages
 
# test function by updating damages
updated_damages = update_damages(damages)
print(updated_damages) 

# 2 
# Create a Table
def dicionario (names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    new_table = dict()
    for i in range(len(names)):
        new_table[names[i]] = {'Name' : names[i],
                              'Month' : months[i],
                              'Year' : years[i],
                              'Max Sustained Wind' : max_sustained_winds[i],
                              'Areas affected': areas_affected[i],
                              'Damage' : updated_damages[i],
                              'Deaths' : deaths[i]}
    return new_table

# Create and view the hurricanes dictionary
new_list = dicionario(names, months, years, max_sustained_winds, areas_affected, damages, deaths) 
print(" \n Dicionario por Nome")
print(new_list)
# 3
# Organizing by Year
def key_year(new_list):
    dict_by_year = {}
    for value in new_list.values():
        Year = value.get("Year")
        Month = value.get("Month")
        Name = value.get("Name")
        Max_Sustained_Wind = value.get("Max Sustained Wind")
        Areas_affected = value.get('Areas affected')
        Damage = value.get('Damage')
        Deaths = value.get('Deaths')
        dict_by_year.update({Year: [Name, Month, Max_Sustained_Wind, Areas_affected, Damage, Deaths]})
    return dict_by_year

# create a new dictionary of hurricanes with year and key
dict_by_year = key_year(new_list)
print("\n Dicionario por Ano:")
print(dict_by_year)
        

# 4
# Counting Damaged Areas

def count_areas(new_list):
    damaged_areas= dict()
    for lists in new_list:
        Areas= new_list[lists]['Areas affected']
        for area in Areas:
            if area not in damaged_areas:
                damaged_areas[area] = 1
            else:
                damaged_areas[area] += 1
    return damaged_areas

damaged_areas = count_areas(new_list)

# create dictionary of areas to store the number of hurricanes involved in
print("\n Tornado por area:")
print(damaged_areas)

# 5 
# Calculating Maximum Hurricane Count

def most_affected_area(damaged_areas):
    max_area = ' '
    max_area_count = 0
    for area in damaged_areas:
        if damaged_areas[area] > max_area_count:
            max_area = area
            max_area_count = damaged_areas[area]
    return max_area, max_area_count

most_affected_area = most_affected_area(damaged_areas)

# find most frequently affected area and the number of hurricanes involved in 
print('\n Area mais atingida:')
print(most_affected_area)

# 6
# Calculating the Deadliest Hurricane
def deadliest (new_list):
    max_dead = ' '
    max_dead_count = 0
    for dead in new_list:
        if new_list[dead]["Deaths"] > max_dead_count:
            max_dead = dead
            max_dead_count = new_list[dead]["Deaths"]
    return max_dead, max_dead_count

deadliest = deadliest(new_list)
print('\n Tornado com mais mortos:')
print(deadliest)   
# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality
def mortality_scale (new_list):
  dictionary_mortality_scale = dict()
  mortality_scale = {0: 0, 1:100, 2:500, 3: 1000, 4: 10000}
  for mortality in new_list:
    num_deaths = new_list[mortality]["Deaths"]
    if num_deaths == mortality_scale[0]:
      dictionary_mortality_scale[0] =  new_list[mortality]
    if num_deaths > mortality_scale[0] and num_deaths <= mortality_scale[1]:
      dictionary_mortality_scale[1] =  new_list[mortality]
    if num_deaths > mortality_scale[1] and num_deaths <= mortality_scale[2]:
      dictionary_mortality_scale[2] =  new_list[mortality]
    if num_deaths > mortality_scale[2] and num_deaths <= mortality_scale[3]:
      dictionary_mortality_scale[3] =  new_list[mortality]
    if num_deaths > mortality_scale[3] and num_deaths <= mortality_scale[4]:
      dictionary_mortality_scale[4] =  new_list[mortality]
    else:
      dictionary_mortality_scale[5] =  new_list[mortality]
  return dictionary_mortality_scale           

dictionary_mortality_scale = mortality_scale (new_list)

# categorize hurricanes in new dictionary with mortality severity as key
print("\nThe Hurricane with the highest mortality severity is " + str(dictionary_mortality_scale[5]))

# 8 Calculating Hurricane Maximum Damage
def demagiest (new_list):
  max_damage = ' '
  max_damage_count = 0
  for damage in new_list:
    if new_list[damage]["Damage"] == "Damages not recorded":
      pass
    elif new_list[damage]["Damage"] > max_damage_count:
      max_damage = damage
      max_damage_count = new_list[damage]["Damage"]
  return max_damage, max_damage_count
        
# find highest damage inducing hurricane and its total cost
demagiest = demagiest(new_list)
print("\nThe highest damage inducing hurricane is {max_damage} and its total cost demagiest is {max_damage_count}".format(max_damage = demagiest[0], max_damage_count = demagiest[1]))

# 9
# Rating Hurricanes by Damage
def damage_score(new_list):
    damage_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}
    damage_score_list = {0: [], 1: [], 2: [], 3 : [], 4: [], 5: []}
    for value in new_list:
        damages = new_list[value]["Damage"]
        if damages == "Damages not recorded":
            damage_score_list[0].append(new_list[value])      
        elif damages == damage_scale[0]:
            damage_score_list[0] = new_list[value]
        elif damages > damage_scale[0] and damages <= damage_scale[1]:
            damage_score_list[1].append(new_list[value])
        elif damages > damage_scale[1] and damages <= damage_scale[2]:
            damage_score_list[2].append(new_list[value])
        elif damages > damage_scale[2] and damages <= damage_scale[3]:
            damage_score_list[3].append(new_list[value])            
        elif damages > damage_scale[3] and damages <= damage_scale[4]:
            damage_score_list[4].append(new_list[value])
        elif damages > damage_scale[4]:
            damage_score_list[5].append(new_list[value])
    return damage_score_list

# categorize hurricanes in new dictionary with damage severity as key

damage_score_list = damage_score(new_list)
print(damage_score_list[5])


